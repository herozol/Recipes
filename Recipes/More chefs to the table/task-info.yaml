type: edu
files:
- name: src/recipes/RecipesApplication.java
  visible: true
  text: |-
    package recipes;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class RecipesApplication {
        public static void main(String[] args) {
            SpringApplication.run(RecipesApplication.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=8881
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true

    #spring.datasource.driverClassName=org.postgresql.Driver
    #spring.datasource.url=jdbc:postgresql://localhost:5432/recipebook
    #spring.datasource.username=myuser
    #spring.datasource.password=start123
    #spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL10Dialect

    spring.datasource.driverClassName=org.h2.Driver
    spring.datasource.url=jdbc:h2:file:../recipes_db
    spring.datasource.username=sa
    spring.datasource.password=sa
    spring.h2.console.enabled=true
    spring.h2.console.settings.trace=false
    spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
    spring.jpa.hibernate.ddl-auto=update
    spring.jpa.show-sql=true
    hibernate.dialect=org.hibernate.dialect.H2Dialect
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation group: 'org.hibernate', name: 'hibernate-gradle-plugin', version: '6.0.0.Alpha6', ext: 'pom'
        runtimeOnly 'com.h2database:h2'
    //    runtimeOnly 'org.postgresql:postgresql'
    }
  learner_created: false
- name: src/recipes/models/Directions.java
  visible: true
  text: |
    package recipes.models;

    import com.fasterxml.jackson.annotation.*;
    import lombok.*;

    import javax.persistence.*;
    import javax.validation.constraints.NotBlank;

    @Getter
    @Setter
    @NoArgsConstructor
    @Entity(name = "directions")
    @Table
    public class Directions {
        @JsonIgnore
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        @Column(name = "directions_id")
        private long id;
        @NotBlank
        @Column(name = "directions")
        private String directions;

        @JsonValue
        public String getDirections() {
            return directions;
        }

        public Directions(String directions) {
            this.directions = directions;
        }
    }
  learner_created: false
- name: src/recipes/models/Recipes.java
  visible: true
  text: |
    package recipes.models;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import lombok.*;
    import org.hibernate.annotations.UpdateTimestamp;

    import javax.persistence.*;
    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.Size;
    import java.time.LocalDateTime;
    import java.util.ArrayList;
    import java.util.LinkedList;
    import java.util.List;

    @Builder
    @Getter
    @Setter
    @NoArgsConstructor
    @AllArgsConstructor
    @Entity(name = "recipes")
    @Table
    public class Recipes {
        @JsonIgnore
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        @Column(name = "recipes_id")
        private long id;
        @Column(name = "name")
        @NotBlank
        private String name;
        @Column(name = "category")
        @NotBlank
        private String category;
        @Column(name = "date")
        @UpdateTimestamp
        private LocalDateTime date;
        @Column(name = "description")
        @NotBlank
        private String description;
        @Size(min = 1)
        @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true)
        @JoinColumn(name = "recipes_id")
        private List<Ingredients> ingredients = new LinkedList<>();
        @Size(min = 1)
        @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true)
        @JoinColumn(name = "recipes_id")
        private List<Directions> directions = new ArrayList<>();

        public String outputId() {
            return " { \"id\": " + this.getId() + "}";
        }
    }
  learner_created: false
- name: src/recipes/models/Ingredients.java
  visible: true
  text: |
    package recipes.models;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonValue;
    import lombok.*;

    import javax.persistence.*;
    import javax.validation.constraints.NotBlank;

    @Getter
    @Setter
    @NoArgsConstructor
    @Entity(name = "ingredients")
    @Table
    public class Ingredients {
        @JsonIgnore
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        @Column(name = "ingredients_id")
        private long id;
        @NotBlank
        @Column(name = "ingredients")
        private String ingredients;

        @JsonValue
        public String getIngredients() {
            return ingredients;
        }

        public Ingredients(String ingredients) {
            this.ingredients = ingredients;
        }
    }
  learner_created: false
- name: src/recipes/controllers/RecipesController.java
  visible: true
  text: |
    package recipes.controllers;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;
    import recipes.models.Recipes;
    import recipes.services.RecipeService;

    import javax.validation.Valid;
    import java.util.List;

    @RestController
    @RequestMapping("/api/recipe")
    public class RecipesController {
        @Autowired
        RecipeService recipeService;

        @GetMapping(path = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
        public Recipes getRecipes(@PathVariable int id) {
            return recipeService.get(id).orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));
        }

        @GetMapping(path = "/search/", produces = MediaType.APPLICATION_JSON_VALUE)
        public List<Recipes> getRecipesByName(@RequestParam(required = false) String name,
                                              @RequestParam(required = false) String category) {
            if (name != null || category != null) {
                return recipeService.getBy(name, category);
            } else {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
            }
        }

        @PostMapping(path = "/new", produces = MediaType.APPLICATION_JSON_VALUE)
        public ResponseEntity<String> postRecipes(@Valid @RequestBody Recipes inputRecipes) {
            recipeService.save(inputRecipes);
            return new ResponseEntity<>(inputRecipes.outputId(), HttpStatus.OK);
        }

        @PutMapping(path = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
        public ResponseEntity<String> updateRecipes(@PathVariable int id,
                                                    @Valid @RequestBody Recipes inputRecipes) {
            if (recipeService.checkById(id)) {
                recipeService.update(inputRecipes, id);
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            } else {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND);
            }
        }

        @DeleteMapping(path = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
        public ResponseEntity<String> removeRecipes(@PathVariable int id) {
            if (recipeService.checkById(id)) {
                recipeService.remove(id);
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            } else {
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            }
        }
    }
  learner_created: false
- name: src/recipes/services/RecipeServiceImpl.java
  visible: true
  text: |
    package recipes.services;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.data.domain.Sort;
    import org.springframework.stereotype.Service;
    import recipes.models.Recipes;
    import recipes.repositories.RecipesRepository;

    import java.util.List;
    import java.util.Optional;

    @Service
    public class RecipeServiceImpl implements RecipeService {
        @Autowired
        RecipesRepository recipesRepository;

        @Override
        public Optional<Recipes> get(long id) {
            return recipesRepository.findById(id);
        }

        @Override
        public List<Recipes> getBy(String name, String category) {
            return name != null ?
                    recipesRepository.findByNameIgnoreCaseContaining(
                            name, Sort.by("date").descending()) :
                    recipesRepository.findByCategoryIgnoreCase(
                            category, Sort.by("date").descending());
        }

        @Override
        public void save(Recipes recipes) {
            recipesRepository.save(recipes);
        }

        @Override
        public void update(Recipes recipes, long id) {
            Recipes oldRecipe = recipesRepository.findById(id).orElse(new Recipes());
            recipes.setId(oldRecipe.getId());
            recipesRepository.save(recipes);
        }

        @Override
        public boolean checkValid(Recipes recipes) {
            if (recipes.getName().isEmpty() ||
                    recipes.getCategory().isEmpty() ||
                    recipes.getDescription().isEmpty() ||
                    recipes.getIngredients().size() < 1 ||
                    recipes.getDirections().size() < 1) {
                return false;
            } else {
                return true;
            }
        }

        @Override
        public void remove(long id) {
            recipesRepository.deleteById(id);
        }

        @Override
        public boolean checkById(long id) {
            return recipesRepository.existsById(id);
        }

    }
  learner_created: false
- name: src/recipes/services/RecipeService.java
  visible: true
  text: |
    package recipes.services;

    import recipes.models.Recipes;

    import javax.transaction.Transactional;
    import java.util.List;
    import java.util.Optional;

    public interface RecipeService {

        @Transactional
        Optional<Recipes> get(long id);

        @Transactional
        List<Recipes> getBy(String param1, String param2);

        @Transactional
        void save(Recipes recipes);

        @Transactional
        void update(Recipes recipes, long id);

        @Transactional
        void remove(long id);

        @Transactional
        boolean checkById(long id);

        boolean checkValid(Recipes recipes);

    }
  learner_created: false
- name: src/recipes/repositories/RecipesRepository.java
  visible: true
  text: |
    package recipes.repositories;

    import org.springframework.data.domain.Sort;
    import org.springframework.data.jpa.repository.Modifying;
    import org.springframework.data.jpa.repository.Query;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.data.repository.query.Param;
    import org.springframework.stereotype.Repository;
    import recipes.models.Recipes;

    import javax.transaction.Transactional;
    import java.util.List;

    @Repository
    public interface RecipesRepository extends CrudRepository<Recipes, Long> {
        List<Recipes> findByNameIgnoreCaseContaining(String name, Sort sort);

        List<Recipes> findByCategoryIgnoreCase(String category, Sort sort2);

        @Modifying
        @Transactional
        @Query(value = "UPDATE recipes SET name = :name, category = :category, description = :description WHERE recipes_id = :id")
        void updateRecipesById(
                @Param("name") String name,
                @Param("category") String category,
                @Param("description") String description,
                @Param("id") long id);
    }
  learner_created: false
- name: test/RecipesApplicationTest.java
  visible: false
  text: |
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    import org.hyperskill.hstest.testing.expect.json.builder.JsonArrayBuilder;
    import recipes.RecipesApplication;

    import java.util.*;

    import static org.hyperskill.hstest.testcase.CheckResult.correct;


    public class RecipesApplicationTest extends SpringTest {

        public RecipesApplicationTest() {
            super(RecipesApplication.class, "../recipes_db.mv.db");
        }

        // Initialization ---

        static class Recipe {
            final String name;
            final String category;
            final String description;
            final String[] ingredients;
            final String[] directions;

            Recipe(String name, String category, String description, String[] ingredients, String[] directions) {
                this.name = name;
                this.category = category;
                this.description = description;
                this.ingredients = ingredients;
                this.directions = directions;
            }
        }

        final Recipe[] RECIPES = {
            // 0
            new Recipe(
                "Fresh Mint Tea /Test",
                "beverage /Test",
                "Light, aromatic and refreshing beverage, ... /Test",
                new String[]{"boiled water", "honey", "fresh mint leaves /Test"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again /Test"}
            ),
            // 1
            new Recipe(
                "Warming Ginger Tea /Test",
                "beverage /Test",
                "Ginger tea is a warming drink for cool weather, ... /Test",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey /Test"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy /Test"}
            ),
            // 2
            new Recipe(
                "ice-cream",
                "Dessert",
                "-",
                new String[]{"--", "---", "-"},
                new String[]{"----", "---"}
            ),
            // 3
            new Recipe(
                "tea r 4",
                "DesserT",
                "---",
                new String[]{"-", "----", "-"},
                new String[]{"----", "--", "--"}
            ),
            // 4
            new Recipe(
                "recipe ice-cream 5",
                "Desser",
                "---",
                new String[]{"-", "--", "-"},
                new String[]{"-", "--", "---"}
            ),
            // 5
            new Recipe(
                "--",
                "DeSSert",
                "---",
                new String[]{"---", "-", "--"},
                new String[]{"---", "-"}
            ),
            // 6
            new Recipe(
                "ICE-CREAM",
                "desserT",
                "----",
                new String[]{"-", "-", "--"},
                new String[]{"---", "--", "--"}
            ),
            // 7
            new Recipe(
                "---",
                "dessert",
                "--",
                new String[]{"-", "----"},
                new String[]{"-----", "-", "---"}
            ),
            // 8
            new Recipe(
                "9 recipe Tea test",
                "-",
                "----",
                new String[]{"-", "-", "----"},
                new String[]{"-----", "-", "--"}
            ),
            // 9
            new Recipe(
                "10 ice recipe test",
                "-",
                "--",
                new String[]{"----", "--;", "---"},
                new String[]{"--", "-"}
            ),
            // 10
            new Recipe(
                "11 ice-creamrecipe test",
                "veryDessert",
                "-",
                new String[]{"-", "--"},
                new String[]{"-----", "-", "---"}
            ),
            // 11
            new Recipe(
                "cream",
                "BEVerage",
                "--",
                new String[]{"---", "-", "-"},
                new String[]{"-", "--"}
            ),
            // 12
            new Recipe(
                "ice-cre",
                "---Dessert",
                "-",
                new String[]{"---", "-"},
                new String[]{"----", "-", "-"}
            ),

            // 13
            new Recipe(
                "ice-cream",
                "DESSERT",
                "-",
                new String[]{"----", "--"},
                new String[]{"-", "--", "-"}
            ),
            // 14
            new Recipe(
                "15 recipe test ice-CREAM",
                "Dessert",
                "-",
                new String[]{"-", "---'", "-----"},
                new String[]{"---", "-"}
            )
        };

        final Recipe[] INCORRECT_RECIPES = {
            //0
            new Recipe(
                null,
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //1
            new Recipe(
                "Fresh Mint Tea",
                null,
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //2
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                null,
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy"}
            ),
            //3
            new Recipe(
                "Fresh Mint Tea",
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                null,
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //4
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                "Ginger tea is a warming drink for cool weather, ...",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                null
            ),
            //5
            new Recipe(
                "  ",
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //6
            new Recipe(
                "Fresh Mint Tea",
                "  ",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //7
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                "  ",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy"}
            ),
            //8
            new Recipe(
                "Fresh Mint Tea",
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //9
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                "Ginger tea is a warming drink for cool weather, ...",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{}
            )
        };

        final Recipe[] RECIPES_CATEGORY_DESSERT_REVERSED = new Recipe[]{RECIPES[14], RECIPES[13], RECIPES[7], RECIPES[6],
            RECIPES[5], RECIPES[3], RECIPES[2]};

        final Recipe[] RECIPES_NAME_CONTAINS_ICE_CREAM_REVERSED = new Recipe[]{RECIPES[14], RECIPES[13], RECIPES[10], RECIPES[6],
            RECIPES[4], RECIPES[2]};

        final String[] JSON_RECIPES = toJson(RECIPES);
        final String[] JSON_INCORRECT_RECIPES = toJson(INCORRECT_RECIPES);

        final String API_RECIPE_NEW = "/api/recipe/new";
        final String API_RECIPE = "/api/recipe/";
        final String API_RECIPE_SEARCH = "/api/recipe/search/";
        final String API_REGISTER = "/api/register";

        // recipes ids will be saved when testing POST requests and used later to test GET/PUT/DELETE requests
        final List<Integer> recipeIds = new ArrayList<>();

        final String CATEGORY = "category";
        final String NAME = "name";

        final static Gson gson = new Gson();

        final String[] MAIN_LOGIN_PASS = {"LoginTest2@test.com", "Test2222222"};
        final String[] ADDITIONAL_LOGIN_PASS_1 = {"LoginTest1@test.com", "Test1111"};
        final String[] ADDITIONAL_LOGIN_PASS_2 = {"LoginTest3@test.com", "Test33333333333"};

        final String[] INCORRECT_LOGIN_CORRECT_PASS_1 = {"Test3@testcom", "Test3333"};
        final String[] INCORRECT_LOGIN_CORRECT_PASS_2 = {"Test4test.com", "Test44444444"};

        final String[] CORRECT_LOGIN_INCORRECT_PASS_1 = {"Test5@test.com", "Test555"};
        final String[] CORRECT_LOGIN_INCORRECT_PASS_2 = {"Test6@test.com", "        "};

        final String[] UNREGISTERED_LOGIN_PASS = {"abc@test.com", "password99"};


        // Helper functions ---

        static String[] toJson(Object[] objects) {
            return Arrays
                .stream(objects)
                .map(gson::toJson)
                .toArray(String[]::new);
        }

        static void throwIfIncorrectStatusCode(HttpResponse response, int status) {
            if (response.getStatusCode() != status) {
                throw new WrongAnswer(response.getRequest().getMethod() +
                    " " + response.getRequest().getLocalUri() +
                    " should respond with status code " + status +
                    ", responded: " + response.getStatusCode() + "\n\n" +
                    "Response body:\n" + response.getContent());
            }
        }

        CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception e) {
                throw new UnexpectedError(e.getMessage());
            }

            return correct();
        }

        static Map<String, String> generateUrlParams(int len) {
            Map<String, String> params = new LinkedHashMap<>();

            for (int i = 0; i < len; i++) {
                params.put("key" + i, "value" + i);
            }

            return params;
        }

        static void sleep(int milliseconds) {
            try {
                Thread.sleep(milliseconds);
            } catch (Exception e) {
                throw new UnexpectedError(e.getMessage());
            }
        }

        static JsonArrayBuilder recipesToJsonArrayBuilder(Recipe[] recipes) {
            JsonArrayBuilder isArray = isArray();

            // just appends "item"(s)
            for (Recipe recipe : recipes) {

                isArray = isArray.item(
                    isObject()
                        .value("name", isString(recipe.name))
                        .value("category", isString(recipe.category))
                        .value("date", isString(d -> d.length() >= 8))
                        .value("description", isString(recipe.description))
                        .value("ingredients", isArray(recipe.ingredients))
                        .value("directions", isArray(recipe.directions)));
            }

            return isArray;
        }

        public HttpRequest addAuthUnregisteredUser(HttpRequest request) {
            return request.basicAuth(UNREGISTERED_LOGIN_PASS[0], UNREGISTERED_LOGIN_PASS[1]);
        }


        // Tests ---

        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
            () -> testPostRegister(ADDITIONAL_LOGIN_PASS_1, 200),
            () -> testPostRegister(ADDITIONAL_LOGIN_PASS_1, 400),
            () -> testPostRegister(MAIN_LOGIN_PASS, 200),
            () -> testPostRegister(ADDITIONAL_LOGIN_PASS_2, 200),
            () -> testPostRegister(INCORRECT_LOGIN_CORRECT_PASS_1, 400),
            () -> testPostRegister(INCORRECT_LOGIN_CORRECT_PASS_2, 400),
            () -> testPostRegister(CORRECT_LOGIN_INCORRECT_PASS_1, 400),
            () -> testPostRegister(CORRECT_LOGIN_INCORRECT_PASS_2, 400),

            // Tests with authentication
            () -> testPostRecipe(JSON_RECIPES[0], MAIN_LOGIN_PASS),
            () -> testPostRecipe(JSON_RECIPES[1], MAIN_LOGIN_PASS),

            () -> testGetRecipe(recipeIds.get(0), RECIPES[0], MAIN_LOGIN_PASS),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1], MAIN_LOGIN_PASS),
            this::reloadServer,
            () -> testGetRecipe(recipeIds.get(0), RECIPES[0], MAIN_LOGIN_PASS),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1], MAIN_LOGIN_PASS),

            () -> testUpdateRecipe(recipeIds.get(0), JSON_RECIPES[1], MAIN_LOGIN_PASS),
            () -> testGetRecipe(recipeIds.get(0), RECIPES[1], MAIN_LOGIN_PASS),

            () -> testDeleteRecipe(recipeIds.get(0), MAIN_LOGIN_PASS),

            () -> testDeleteRecipeNotFoundStatusCode(recipeIds.get(0), MAIN_LOGIN_PASS),
            () -> testGetRecipeNotFoundStatusCode(recipeIds.get(0), MAIN_LOGIN_PASS),
            () -> testUpdateRecipeNotFoundStatusCode(recipeIds.get(0), JSON_RECIPES[1], MAIN_LOGIN_PASS),


            // Add more recipes before testing if elems sorted correctly by date.
            // Sleep calls added because tests send requests very quickly and this can produce duplicate dates in rare cases.
            // And if a user uses "unstable" sort to sort recipes, tests will be unstable. Thread sleep prevents duplicates.
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[2], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[3], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[4], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[5], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[6], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[7], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[8], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[9], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[10], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[11], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[12], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[13], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[14], MAIN_LOGIN_PASS);
            },

            () -> testGetRecipesByCategorySorted(RECIPES_CATEGORY_DESSERT_REVERSED, "dessert", MAIN_LOGIN_PASS),
            () -> testGetRecipesByNameContainsSorted(RECIPES_NAME_CONTAINS_ICE_CREAM_REVERSED, "ice-cream", MAIN_LOGIN_PASS),

            () -> testGetRecipesByCategorySorted(new Recipe[]{}, "should_return_empty_array_1", MAIN_LOGIN_PASS),
            () -> testGetRecipesByNameContainsSorted(new Recipe[]{}, "should_return_empty_array_2", MAIN_LOGIN_PASS),

            () -> testGetRecipesBadRequestStatusCode(0, MAIN_LOGIN_PASS),
            () -> testGetRecipesBadRequestStatusCode(1, MAIN_LOGIN_PASS),
            () -> testGetRecipesBadRequestStatusCode(2, MAIN_LOGIN_PASS),
            () -> testGetRecipesBadRequestStatusCode(5, MAIN_LOGIN_PASS),

            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[0], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[1], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[2], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[3], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[4], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[5], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[6], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[7], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[8], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[9], MAIN_LOGIN_PASS),

            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[0], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[1], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[2], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[3], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[4], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[5], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[6], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[7], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[8], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[9], MAIN_LOGIN_PASS),
            this::reloadServer,

            // Use second registered user to check if endpoints are available.
            () -> testPostRecipe(JSON_RECIPES[0], ADDITIONAL_LOGIN_PASS_1),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1], ADDITIONAL_LOGIN_PASS_1),
            () -> testGetRecipesByCategorySorted(RECIPES_CATEGORY_DESSERT_REVERSED, "dessert", ADDITIONAL_LOGIN_PASS_1),
            () -> testGetRecipesByNameContainsSorted(RECIPES_NAME_CONTAINS_ICE_CREAM_REVERSED, "ice-cream", ADDITIONAL_LOGIN_PASS_1),
            // Use third registered user to check forbidden status code.
            () -> testDeleteRecipeForbiddenStatusCode(recipeIds.get(1), ADDITIONAL_LOGIN_PASS_2),
            () -> testUpdateRecipeForbiddenStatusCode(recipeIds.get(1), JSON_RECIPES[2], ADDITIONAL_LOGIN_PASS_2),

            // unregistered login and pass
            () -> testPostRecipeUnregisteredUser(JSON_RECIPES[0]),
            () -> testGetRecipeUnregisteredUser(recipeIds.get(0)),
            () -> testUpdateRecipeUnregisteredUser(recipeIds.get(0), JSON_RECIPES[1]),
            () -> testDeleteRecipeUnregisteredUser(recipeIds.get(0)),
            () -> testGetRecipesByCategorySortedUnregisteredUser("dessert"),
            () -> testGetRecipesByNameContainsSortedUnregisteredUser("ice-cream"),

            // without authentication
            () -> testPostRecipeNoAuth(JSON_RECIPES[0]),
            () -> testGetRecipeNoAuth(recipeIds.get(0)),
            () -> testUpdateRecipeNoAuth(recipeIds.get(0), JSON_RECIPES[1]),
            () -> testDeleteRecipeNoAuth(recipeIds.get(0)),
            () -> testGetRecipesByCategorySortedNoAuth("dessert"),
            () -> testGetRecipesByNameContainsSortedNoAuth("ice-cream")
        };

        CheckResult testPostRegister(String[] loginAndPass, int statusCode) {
            final String JSON_LOGIN_PASS = "{\"email\":\"" + loginAndPass[0] + "\",\"password\":\"" + loginAndPass[1] + "\"}";

            HttpResponse response = post(API_REGISTER, JSON_LOGIN_PASS).send();

            throwIfIncorrectStatusCode(response, statusCode);

            return correct();
        }

        // Tests with authentication
        CheckResult testPostRecipe(String jsonRecipe, String[] loginPass) {
            HttpResponse response = post(API_RECIPE_NEW, jsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(recipeId -> {
                        recipeIds.add(recipeId);
                        return true;
                    })));

            return correct();
        }

        CheckResult testGetRecipe(int recipeId, Recipe recipe, String[] loginPass) {
            HttpResponse response = get(API_RECIPE + recipeId).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("name", isString(recipe.name))
                    .value("category", isString(recipe.category))
                    .value("date", isString(d -> d.length() >= 8))
                    .value("description", isString(recipe.description))
                    .value("ingredients", isArray(recipe.ingredients))
                    .value("directions", isArray(recipe.directions)));

            return correct();
        }

        CheckResult testUpdateRecipe(int recipeId, String jsonRecipe, String[] loginPass) {
            HttpResponse response = put(API_RECIPE + recipeId, jsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 204);

            return correct();
        }

        CheckResult testDeleteRecipe(int recipeId, String[] loginPass) {
            HttpResponse response = delete(API_RECIPE + recipeId).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 204);

            return correct();
        }

        CheckResult testGetRecipesByCategorySorted(Recipe[] recipes, String paramValue, String[] loginPass) {
            HttpResponse response = get(API_RECIPE_SEARCH).addParam(CATEGORY, paramValue).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                recipesToJsonArrayBuilder(recipes)
            );

            return correct();
        }

        private CheckResult testGetRecipesByNameContainsSorted(Recipe[] recipes, String paramValue, String[] loginPass) {
            HttpResponse response = get(API_RECIPE_SEARCH).basicAuth(loginPass[0], loginPass[1]).addParam(NAME, paramValue).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                recipesToJsonArrayBuilder(recipes)
            );

            return correct();
        }

        // Status codes tests with authentication
        CheckResult testGetRecipeNotFoundStatusCode(int recipeId, String[] loginPass) {
            HttpResponse response = get(API_RECIPE + recipeId).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testUpdateRecipeNotFoundStatusCode(int recipeId, String jsonRecipe, String[] loginPass) {
            HttpResponse response = put(API_RECIPE + recipeId, jsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testDeleteRecipeNotFoundStatusCode(int recipeId, String[] loginPass) {
            HttpResponse response = delete(API_RECIPE + recipeId).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testGetRecipesBadRequestStatusCode(int numberOfQueryParams, String[] loginPass) {
            Map<String, String> params = generateUrlParams(numberOfQueryParams);

            HttpResponse response = get(API_RECIPE_SEARCH).addParams(params).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 400);

            return correct();
        }

        CheckResult testPostIncorrectRecipeStatusCode(String incorrectJsonRecipe, String[] loginPass) {
            HttpResponse response = post(API_RECIPE_NEW, incorrectJsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 400);

            return correct();
        }

        CheckResult testUpdateIncorrectRecipeStatusCode(int recipeId, String incorrectJsonRecipe, String[] loginPass) {
            HttpResponse response = put(API_RECIPE + recipeId, incorrectJsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 400);

            return correct();
        }

        CheckResult testDeleteRecipeForbiddenStatusCode(int recipeId, String[] loginPass) {
            HttpResponse response = delete(API_RECIPE + recipeId).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 403);

            return correct();
        }

        CheckResult testUpdateRecipeForbiddenStatusCode(int recipeId, String jsonRecipe, String[] loginPass) {
            HttpResponse response = put(API_RECIPE + recipeId, jsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 403);

            return correct();
        }

        // Not registered user tests
        CheckResult testPostRecipeUnregisteredUser(String jsonRecipe) {
            HttpResponse response = addAuthUnregisteredUser(post(API_RECIPE_NEW, jsonRecipe)).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testGetRecipeUnregisteredUser(int recipeId) {
            HttpResponse response = addAuthUnregisteredUser(get(API_RECIPE + recipeId)).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testUpdateRecipeUnregisteredUser(int recipeId, String jsonRecipe) {
            HttpResponse response = addAuthUnregisteredUser(put(API_RECIPE + recipeId, jsonRecipe)).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testDeleteRecipeUnregisteredUser(int recipeId) {
            HttpResponse response = addAuthUnregisteredUser(delete(API_RECIPE + recipeId)).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testGetRecipesByCategorySortedUnregisteredUser(String paramValue) {
            HttpResponse response = addAuthUnregisteredUser(get(API_RECIPE_SEARCH)).addParam(CATEGORY, paramValue).send();

            throwIfIncorrectStatusCode(response, 401);


            return correct();
        }

        private CheckResult testGetRecipesByNameContainsSortedUnregisteredUser(String paramValue) {
            HttpResponse response = addAuthUnregisteredUser(get(API_RECIPE_SEARCH)).addParam(NAME, paramValue).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        // No authentication tests
        CheckResult testPostRecipeNoAuth(String jsonRecipe) {
            HttpResponse response = post(API_RECIPE_NEW, jsonRecipe).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testGetRecipeNoAuth(int recipeId) {
            HttpResponse response = get(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testUpdateRecipeNoAuth(int recipeId, String jsonRecipe) {
            HttpResponse response = put(API_RECIPE + recipeId, jsonRecipe).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testDeleteRecipeNoAuth(int recipeId) {
            HttpResponse response = delete(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testGetRecipesByCategorySortedNoAuth(String paramValue) {
            HttpResponse response = get(API_RECIPE_SEARCH).addParam(CATEGORY, paramValue).send();

            throwIfIncorrectStatusCode(response, 401);


            return correct();
        }

        private CheckResult testGetRecipesByNameContainsSortedNoAuth(String paramValue) {
            HttpResponse response = get(API_RECIPE_SEARCH).addParam(NAME, paramValue).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }
    }
  learner_created: false
- name: src/recipes/controllers/RegistrationController.java
  visible: true
  learner_created: true
- name: src/recipes/config/WebSecurityConfigurerImp.java
  visible: true
  learner_created: true
- name: src/recipes/repositories/UserRepository.java
  visible: true
  learner_created: true
- name: src/recipes/services/UserService.java
  visible: true
  learner_created: true
- name: src/recipes/services/UserServiceImpl.java
  visible: true
  learner_created: true
- name: src/recipes/models/UserDetailsImpl.java
  visible: true
  learner_created: true
- name: src/recipes/services/UserDetailsServiceImpl.java
  visible: true
  learner_created: true
- name: src/recipes/models/Users.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13092#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Wed, 02 Nov 2022 14:18:23 UTC"
record: 5
